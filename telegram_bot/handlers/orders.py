"""Order management handlers"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from states import OrderStates
from keyboards import get_order_actions_keyboard
from services import api_client, n8n_client
from config import settings

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text.in_(["üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üì¶ My Orders", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "/orders"]))
async def cmd_orders(message: Message, user: dict):
    """Show user orders history"""
    language = user.get("language", "uk")
    telegram_id = message.from_user.id

    orders = await api_client.get_user_orders(telegram_id, limit=10)

    if not orders:
        texts = {
            "uk": "üì¶ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n\n–û—Ñ–æ—Ä–º—ñ—Ç—å –≤–∞—à–µ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ üçï –ú–µ–Ω—é",
            "en": "üì¶ You don't have any orders yet.\n\nPlace your first order via üçï Menu",
            "ru": "üì¶ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ üçï –ú–µ–Ω—é"
        }
        await message.answer(texts.get(language, texts["uk"]))
        return

    texts = {
        "uk": "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n",
        "en": "üì¶ Your orders:\n\n",
        "ru": "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    }

    text = texts.get(language, texts["uk"])

    for order in orders[:5]:
        status_emoji = {
            "pending": "‚è≥",
            "paid": "üí≥",
            "confirmed": "‚úÖ",
            "completed": "üéâ",
            "cancelled": "‚ùå"
        }
        emoji = status_emoji.get(order["status"], "üì¶")

        text += f"{emoji} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['order_code']}\n"
        text += f"   –°—É–º–∞: {order['total_amount']} –≥—Ä–Ω\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"

    await message.answer(text)


@router.message(OrderStates.waiting_for_receipt, F.photo)
async def process_receipt(message: Message, state: FSMContext):
    """Handle receipt photo upload"""
    data = await state.get_data()
    order_id = data.get("order_id")
    user = data.get("user")
    language = user.get("language", "uk")

    # Download photo
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    photo_bytes = await message.bot.download_file(file.file_path)

    # Upload to backend
    result = await api_client.upload_receipt(order_id, photo_bytes.read())

    if result:
        # Trigger n8n for AI validation
        await n8n_client.validate_receipt(
            order_id=order_id,
            receipt_image_url=result["receipt_image_url"],
            expected_amount=result["total_amount"],
            order_code=result["order_code"]
        )

        texts = {
            "uk": "‚úÖ –ß–µ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!\n\n‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI...\n\n–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
            "en": "‚úÖ Receipt uploaded!\n\n‚è≥ Validating receipt using AI...\n\nYou'll receive notification after validation.",
            "ru": "‚úÖ –ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫ —Å –ø–æ–º–æ—â—å—é AI...\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
        }
        await message.answer(texts.get(language, texts["uk"]))
    else:
        texts = {
            "uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "en": "‚ùå Receipt upload error. Please try again.",
            "ru": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        }
        await message.answer(texts.get(language, texts["uk"]))

    await state.clear()
