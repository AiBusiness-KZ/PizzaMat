"""Support and feedback handlers"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import logging
import random
import string

from states import SupportStates
from services import api_client
from config import settings

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text.in_(["üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "üí¨ Support", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/support"]))
async def cmd_support(message: Message, state: FSMContext, user: dict):
    """Start support conversation"""
    language = user.get("language", "uk")

    texts = {
        "uk": "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.\n–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        "en": "üí¨ Support\n\nDescribe your issue or question.\nManager will respond to you soon.",
        "ru": "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.\n–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    }

    await state.set_state(SupportStates.waiting_for_message)
    await message.answer(texts.get(language, texts["uk"]))


@router.message(SupportStates.waiting_for_message, F.text)
async def process_support_message(message: Message, state: FSMContext, user: dict):
    """Handle support message"""
    language = user.get("language", "uk")
    ticket_id = "SUP-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

    # Save to database
    result = await api_client.create_support_message(
        user_id=user["id"],
        telegram_id=message.from_user.id,
        ticket_id=ticket_id,
        message_text=message.text,
        sender_type="user"
    )

    if result:
        # Send to manager channel
        manager_text = f"üí¨ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\n\n"
        manager_text += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user['full_name']}\n"
        manager_text += f"üÜî Ticket: {ticket_id}\n"
        manager_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n\n"
        manager_text += f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message.text}"

        try:
            await message.bot.send_message(settings.MANAGER_CHANNEL_ID, manager_text)
        except Exception as e:
            logger.error(f"Failed to send to manager: {e}")

        texts = {
            "uk": f"‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!\n\n–ù–æ–º–µ—Ä –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {ticket_id}\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
            "en": f"‚úÖ Your message has been sent!\n\nTicket number: {ticket_id}\n\nManager will respond soon.",
            "ru": f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: {ticket_id}\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        }
        await message.answer(texts.get(language, texts["uk"]))
    else:
        texts = {
            "uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "en": "‚ùå Send error. Please try again.",
            "ru": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        }
        await message.answer(texts.get(language, texts["uk"]))

    await state.clear()
