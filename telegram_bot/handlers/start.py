"""
Start command and user registration handlers
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from states import RegistrationStates
from keyboards import (
    get_phone_keyboard,
    get_cities_keyboard,
    get_main_menu_keyboard
)
from services import api_client

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    Handle /start command
    Check if user exists, if not - start registration
    """
    telegram_id = message.from_user.id

    # Check if user already registered
    user = await api_client.get_user(telegram_id)

    if user:
        # User already registered
        language = user.get("language", "uk")

        welcome_texts = {
            "uk": f"–ü—Ä–∏–≤—ñ—Ç, {user['full_name']}! üëã\n\n"
                  f"–†–∞–¥ –±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.",
            "en": f"Hello, {user['full_name']}! üëã\n\n"
                  f"Good to see you again! Use the menu below for navigation.",
            "ru": f"–ü—Ä–∏–≤–µ—Ç, {user['full_name']}! üëã\n\n"
                  f"–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        }

        await message.answer(
            welcome_texts.get(language, welcome_texts["uk"]),
            reply_markup=get_main_menu_keyboard(language)
        )

        # Clear any existing state
        await state.clear()
    else:
        # Start registration
        registration_texts = {
            "uk": "üëã –í—ñ—Ç–∞—î–º–æ –≤ PizzaMat!\n\n"
                  "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.\n\n"
                  "üì± –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:",
            "en": "üëã Welcome to PizzaMat!\n\n"
                  "To place orders, please register.\n\n"
                  "üì± Share your phone number to continue:",
            "ru": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PizzaMat!\n\n"
                  "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n\n"
                  "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        }

        language_code = message.from_user.language_code or "uk"
        if language_code not in ["uk", "en", "ru"]:
            language_code = "uk"

        await state.update_data(language=language_code)
        await state.set_state(RegistrationStates.waiting_for_phone)

        await message.answer(
            registration_texts.get(language_code, registration_texts["uk"]),
            reply_markup=get_phone_keyboard(language_code)
        )


@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    """
    Handle phone number from contact
    """
    data = await state.get_data()
    language = data.get("language", "uk")

    # Validate that the contact is user's own number
    if message.contact.user_id != message.from_user.id:
        error_texts = {
            "uk": "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–∞–º–µ —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
            "en": "‚ùå Please share your own phone number.",
            "ru": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        }
        await message.answer(
            error_texts.get(language, error_texts["uk"]),
            reply_markup=get_phone_keyboard(language)
        )
        return

    phone = message.contact.phone_number

    # Store phone
    await state.update_data(phone=phone)

    # Ask for full name
    await state.set_state(RegistrationStates.waiting_for_name)

    name_texts = {
        "uk": "‚úÖ –î—è–∫—É—î–º–æ!\n\n"
              "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:",
        "en": "‚úÖ Thank you!\n\n"
              "Now enter your full name:",
        "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ!\n\n"
              "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
    }

    await message.answer(
        name_texts.get(language, name_texts["uk"]),
        reply_markup=None  # Remove keyboard
    )


@router.message(RegistrationStates.waiting_for_name, F.text)
async def process_name(message: Message, state: FSMContext):
    """
    Handle full name
    """
    data = await state.get_data()
    language = data.get("language", "uk")

    full_name = message.text.strip()

    # Validate name (at least 2 characters)
    if len(full_name) < 2:
        error_texts = {
            "uk": "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏).",
            "en": "‚ùå Please enter a valid name (at least 2 characters).",
            "ru": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)."
        }
        await message.answer(error_texts.get(language, error_texts["uk"]))
        return

    # Store name
    await state.update_data(full_name=full_name)

    # Ask for city
    await state.set_state(RegistrationStates.waiting_for_city)

    # Get available cities
    cities = await api_client.get_cities()

    if not cities:
        # No cities available, create user without city
        await finalize_registration(message, state, city_id=None)
        return

    city_texts = {
        "uk": "üåÜ –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        "en": "üåÜ Select your city:",
        "ru": "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
    }

    await message.answer(
        city_texts.get(language, city_texts["uk"]),
        reply_markup=get_cities_keyboard(cities, language)
    )


@router.callback_query(RegistrationStates.waiting_for_city, F.data.startswith("city_"))
async def process_city(callback: CallbackQuery, state: FSMContext):
    """
    Handle city selection
    """
    city_id = int(callback.data.split("_")[1])

    # Store city
    await state.update_data(city_id=city_id)

    # Finalize registration
    await finalize_registration(callback.message, state, city_id)
    await callback.answer()


async def finalize_registration(message: Message, state: FSMContext, city_id: int = None):
    """
    Finalize user registration - create user in database
    """
    data = await state.get_data()
    language = data.get("language", "uk")
    phone = data.get("phone")
    full_name = data.get("full_name")
    telegram_id = message.chat.id

    # Create user in database
    user = await api_client.create_user(
        telegram_id=telegram_id,
        phone=phone,
        full_name=full_name,
        city_id=city_id,
        language=language
    )

    if user:
        success_texts = {
            "uk": f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                  f"–í—ñ—Ç–∞—î–º–æ, {full_name}! üéâ\n\n"
                  f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–ª—è—Ç–∏ –ø—ñ—Ü—É —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç.\n"
                  f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.",
            "en": f"‚úÖ Registration completed successfully!\n\n"
                  f"Welcome, {full_name}! üéâ\n\n"
                  f"Now you can order pizza through our bot.\n"
                  f"Use the menu below for navigation.",
            "ru": f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                  f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}! üéâ\n\n"
                  f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –ø–∏—Ü—Ü—É —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç.\n"
                  f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        }

        await message.answer(
            success_texts.get(language, success_texts["uk"]),
            reply_markup=get_main_menu_keyboard(language)
        )

        # Clear state
        await state.clear()

        logger.info(f"User {telegram_id} registered successfully")
    else:
        error_texts = {
            "uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: /start",
            "en": "‚ùå Registration error. Please try again: /start",
            "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /start"
        }

        await message.answer(error_texts.get(language, error_texts["uk"]))
        await state.clear()

        logger.error(f"Failed to register user {telegram_id}")
